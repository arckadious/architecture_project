version: "3.8"
services:

# Les microservices ici sont composés soit d'une api seule, soit d'une api et d'une base de données

############                                                         ############
############  bases de données indépendantes à chaque micro-service  ############
############                                                         ############

  auth-mariadb-crossfitlov:
    image : mariadb:latest
    hostname: auth-mariadb-crossfitlov
    environment: 
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: CL
    healthcheck:        #vérifier que mariadb est démarré et prêt à accepter des connexions.
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      - auth-mariadb-crossfitlov-volume:/var/lib/mysql  #persistance des données de la base de données
      - ./auth-api-crossfitlov/dump.sql:/docker-entrypoint-initdb.d/dump.sql #initialisation et créations des tables si inexistantes.
    networks: 
      - db-authapi

  users-mariadb-crossfitlov:
    image : mariadb:latest
    hostname: users-mariadb-crossfitlov
    environment: 
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: CL
    healthcheck:        #vérifier que mariadb est démarré et prêt à accepter des connexions.
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      - users-mariadb-crossfitlov-volume:/var/lib/mysql 
      - ./users-api-crossfitlov/dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks: 
      - db-usersapi

  abonnement-mariadb-crossfitlov:
    image : mariadb:latest
    hostname: abonnement-mariadb-crossfitlov
    environment: 
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: CL
    healthcheck:        #vérifier que mariadb est démarré et prêt à accepter des connexions.
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      - abonnement-mariadb-crossfitlov-volume:/var/lib/mysql  #persistance des données de la base de données
      - ./abonnement-api-crossfitlov/dump.sql:/docker-entrypoint-initdb.d/dump.sql #initialisation et créations des tables si inexistantes.
    networks: 
      - db-abonnementapi

  message-mariadb-crossfitlov:
    image : mariadb:latest
    hostname: message-mariadb-crossfitlov
    environment: 
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: CL
    healthcheck:        #vérifier que mariadb est démarré et prêt à accepter des connexions.
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      - message-mariadb-crossfitlov-volume:/var/lib/mysql  #persistance des données de la base de données
      - ./message-api-crossfitlov/dump.sql:/docker-entrypoint-initdb.d/dump.sql #initialisation et créations des tables si inexistantes.
    networks: 
      - db-messageapi

  match-mariadb-crossfitlov:
    image : mariadb:latest
    hostname: match-mariadb-crossfitlov
    environment: 
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: CL
    healthcheck:        #vérifier que mariadb est démarré et prêt à accepter des connexions.
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    volumes:
      - match-mariadb-crossfitlov-volume:/var/lib/mysql  #persistance des données de la base de données
      - ./match-api-crossfitlov/dump.sql:/docker-entrypoint-initdb.d/dump.sql #initialisation et créations des tables si inexistantes.
    networks: 
      - db-matchapi     




############                      ############
############  APIs microservices  ############
############                      ############



###########################
#     brique frontend     #
###########################
  
  ######## avec lancement direct pour développement ########
  frontend-crossfitlov:
    build: ./project-docker
    ports:
      - "4200:4200"
    volumes:
      - ./project-docker:/app
      - /app/node_modules #volume anonyme, pour empêcher le mount volume d'overwrite le node_modules installé pendant le build de l'image

  ######## avec build production ########
  # frontend-crossfitlov-prod:
  #   build:
  #     context: ./projet-docker
  #     dockerfile: Dockerfile.prod
  #   ports:
  #     - "80:80"
  #   networks:
  #     - frontend
      
#########################################
# brique micro-service authentification #
#########################################
  
  ######## avec lancement direct pour développement ########
  auth-api-crossfitlov:
    build: ./auth-api-crossfitlov
    hostname: auth-api-crossfitlov
    depends_on: 
      auth-mariadb-crossfitlov:
        condition: service_healthy #L'api dépend de sa base de données qui doit être démarrée et prête à accepter des connexions.
    volumes:
      - ./auth-api-crossfitlov:/auth-api-crossfitlov
    networks: 
      - db-authapi
      - backend
      - authapi-usersapi
    ports:
      - "30001:8000"

  ######## avec build production ########
  # auth-api-crossfitlov-prod:
  #   build:
  #     context: ./auth-api-crossfitlov
  #     dockerfile: Dockerfile.prod
  #   depends_on:  
  #     auth-mariadb-crossfitlov:
  #       condition: service_healthy #L'api dépend de sa base de données qui doit être démarrée et prête à accepter des connexions.
  #   hostname: auth-api-crossfitlov
  #   networks: 
  #     - db-authapi
  #     - frontend 
  #     - authapi-usersapi 
  
  # ###############
  # ##### pour faire des tests bdd, à commenter
  # auth-phpmyadmin-crossfitlov:
  #   image : phpmyadmin:latest
  #   ports:
  #     - "30002:80"
  #   environment: 
  #     PMA_HOST: auth-mariadb-crossfitlov
  #   networks: 
  #     - db-authapi
  # ###############

##############################
# brique micro-service users #
##############################

  ######## avec lancement direct pour développement ########
  users-api-crossfitlov:
    build: ./users-api-crossfitlov
    hostname: users-api-crossfitlov
    depends_on: 
      users-mariadb-crossfitlov:
        condition: service_healthy #L'api dépend de sa base de données qui doit être démarrée et prête à accepter des connexions.
    volumes:
      - ./users-api-crossfitlov:/users-api-crossfitlov
    networks: 
      - authapi-usersapi
      - matchapi-usersapi
      - db-usersapi
    # ports:
    #   - "30003:8000"

  ######## avec build production ########
  # users-api-crossfitlov-prod:
  #   build:
  #     context: ./users-api-crossfitlov
  #     dockerfile: Dockerfile.prod
  #   depends_on: 
  #     users-mariadb-crossfitlov:
  #       condition: service_healthy #L'api dépend de sa base de données qui doit être démarrée et prête à accepter des connexions.
  #   hostname: users-api-crossfitlov
  #   networks: 
  #     - db-usersapi
  #     - authapi-usersapi

  # ###############
  # ##### pour faire des tests bdd, à commenter
  # users-phpmyadmin-crossfitlov:
  #   image : phpmyadmin:latest
  #   ports:
  #     - "30004:80"
  #   environment: 
  #     PMA_HOST: users-mariadb-crossfitlov
  #   networks: 
  #     - db-usersapi
  # ###############

###################################
# brique micro-service abonnement #
###################################
  
  ######## avec lancement direct pour développement/prod ########
  abonnement-api-crossfitlov:
    build: ./abonnement-api-crossfitlov
    hostname: abonnement-api-crossfitlov
    depends_on: 
      abonnement-mariadb-crossfitlov:
        condition: service_healthy #L'api dépend de sa base de données qui doit être démarrée et prête à accepter des connexions.
    networks: 
      - db-abonnementapi
      - backend
    ports:
      - "30005:8080"

  # ###############
  # ##### pour faire des tests bdd, à commenter
  # abonnement-phpmyadmin-crossfitlov:
  #   image : phpmyadmin:latest
  #   ports:
  #     - "30006:80"
  #   environment: 
  #     PMA_HOST: abonnement-mariadb-crossfitlov
  #   networks: 
  #     - db-abonnementapi
  # ###############

##############################
# brique micro-service match #
##############################
  
  ######## avec lancement direct pour développement/prod ########
  match-api-crossfitlov:
    build: ./match-api-crossfitlov
    hostname: match-api-crossfitlov
    depends_on: 
      match-mariadb-crossfitlov:
        condition: service_healthy #L'api dépend de sa base de données qui doit être démarrée et prête à accepter des connexions.
    networks: 
      - db-matchapi
      - matchapi-usersapi
      - backend
    ports:
      - "30007:8080"

  # ###############
  # ##### pour faire des tests bdd, à commenter
  # match-phpmyadmin-crossfitlov:
  #   image : phpmyadmin:latest
  #   ports:
  #     - "30008:80"
  #   environment: 
  #     PMA_HOST: match-mariadb-crossfitlov
  #   networks: 
  #     - db-matchapi
  # ###############

################################
# brique micro-service message #
################################
  
  ######## avec lancement direct pour développement/prod ########
  message-api-crossfitlov:
    build: ./message-api-crossfitlov
    hostname: message-api-crossfitlov
    depends_on: 
      message-mariadb-crossfitlov:
        condition: service_healthy #L'api dépend de sa base de données qui doit être démarrée et prête à accepter des connexions.
    networks: 
      - db-messageapi
      - backend
    ports:
      - "30009:8080"
    
  # ###############
  # ##### pour faire des tests bdd, à commenter
  # message-phpmyadmin-crossfitlov:
  #   image : phpmyadmin:latest
  #   ports:
  #     - "30010:80"
  #   environment: 
  #     PMA_HOST: message-mariadb-crossfitlov
  #   networks: 
  #     - db-messageapi
  # ###############
     


  

############                       ############
############  volumes et networks  ############
############                       ############




volumes:
  auth-mariadb-crossfitlov-volume: {}
  users-mariadb-crossfitlov-volume: {}
  abonnement-mariadb-crossfitlov-volume: {}
  match-mariadb-crossfitlov-volume: {}
  message-mariadb-crossfitlov-volume: {}

networks: 

  ###
  # networks entre un micro-service et sa propre bdd
  ###
  db-authapi: # network du microservice d'authentification avec sa base de données
    driver: bridge
  db-usersapi: # network du microservice Users (toutes les infos utilisateurs) avec sa base de données
    driver: bridge
  db-abonnementapi: # network du microservice Abonnement avec sa base de données
    driver: bridge
  db-messageapi: # network du microservice Message avec sa base de données
    driver: bridge
  db-matchapi: # network du microservice Match avec sa base de données
    driver: bridge

  ###
  # networks entre les micro-services
  ###
  backend:
    driver: bridge

  ###
  # networks inter micro-service
  ###
  authapi-usersapi:
    driver: bridge
  matchapi-usersapi:
    driver: bridge